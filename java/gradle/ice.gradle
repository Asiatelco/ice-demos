// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// **********************************************************************

if (!project.plugins.findPlugin(com.zeroc.gradle.icebuilder.slice.SlicePlugin)) {
    project.apply(plugin: com.zeroc.gradle.icebuilder.slice.SlicePlugin)
}

if(this.cppPlatform) {
    slice.cppPlatform = this.cppPlatform
}

if(this.cppConfiguration) {
    slice.cppConfiguration = this.cppConfiguration
}

if(this.iceHome) {
    slice.iceHome = this.iceHome
}

buildscript {
    //
    // If iceBuilderHome is set add its lib directory it to the local maven repositories
    // so we can build using a local plugin version
    //
    if (iceBuilderHome) {
        def builder  = new File([iceBuilderHome, "build", "libs"].join(File.separator))

        if(builder.exists()) {
            repositories {
                flatDir dirs: "file://${builder.getCanonicalPath()}"
            }
        }
    }

    if(new File("/usr/share/maven-repo").exists()){
        repositories {
            maven {
                url "file:///usr/share/maven-repo"
            }
        }
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath group: "${iceBuilderClassPath}", name: 'slice', version: "${iceBuilderVersion}"
    }
}

ext.generatedDir = "$project.buildDir/generated"

// Android does not have a compileJava task
if(!(project.hasProperty('android') && project.android.sourceSets)) {
    compileJava {
        options.debug = debug
    }
}

def env = System.getenv()

// Check if we need to append version suffix to jar files
ext.versionSuffix = ""
def iceJar = new File("${slice.jarDir}/ice-${slice.iceVersion}.jar")
if(iceJar.exists()) {
    ext.versionSuffix = "-${slice.iceVersion}"
}

def demoJar(name, mainClass = name.capitalize()) {
    def taskName = name + "Jar"
    // Create a jar for the client & server which includes everything in the demo.
    def jarTask = tasks.create(name: taskName, type: Jar) {
        version = ""
        baseName = name
        from(sourceSets.main.output) {
            include "**"
        }
    }

    jarTask.manifest {
        if(mainClass) {
            attributes("Main-Class": mainClass)
        }
        attributes("Class-Path": configurations.runtime.resolve().collect { it.toURI() }.join(' '))
    }

    artifacts {
        archives jarTask
    }
}

ext {
    demoJar = this.&demoJar
}

def demoIceBoxServer() {
    configurations {
        iceboxserver
    }

    dependencies {
        iceboxserver localDependency("ice")
        iceboxserver localDependency("icessl")
        iceboxserver localDependency("icebox")
        iceboxserver "org.apache.commons:commons-compress:1.14"
    }

    // Create a jar for the client & server which includes everything in the demo.
    def jarTask = tasks.create(name: "IceBoxServerJar", type: Jar) {
        version = ""
        baseName = "iceboxserver"
    }

    jarTask.manifest {
        attributes("Main-Class": "com.zeroc.IceBox.Server")
        attributes("Class-Path": configurations.iceboxserver.resolve().collect { it.toURI() }.join(' '))
    }

    artifacts {
        archives jarTask
    }
}

ext {
    demoIceBoxServer = this.&demoIceBoxServer
}

def localDependency(artifactId) {
    return "com.zeroc:${artifactId}:${slice.iceVersion}"
}

ext {
    localDependency = this.&localDependency
}
