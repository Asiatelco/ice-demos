// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// **********************************************************************

if(!project.plugins.findPlugin(com.zeroc.gradle.icebuilder.slice.SlicePlugin)) {
    project.apply(plugin: com.zeroc.gradle.icebuilder.slice.SlicePlugin)
}

if(this.iceHome) {
    slice.iceHome = this.iceHome
}

buildscript {
    ext.useLocalOnly = gradle.startParameter.isOffline()

    //
    // If iceBuilderHome is set add its lib directory it to the local maven repositories
    // so we can build using a local plugin version
    //
    if (iceBuilderHome) {
        def builder  = new File([iceBuilderHome, "build", "libs"].join(File.separator))

        if(builder.exists()) {
            repositories {
                flatDir dirs: "file://${builder.getCanonicalPath()}"
            }
        }
    }

    if(new File("/usr/share/maven-repo").exists()){
        repositories {
            maven {
                url "file:///usr/share/maven-repo"
            }
        }
    }

    if (!useLocalOnly) {
        repositories {
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }

    dependencies {
        classpath group: iceBuilderClassPath, name: 'slice', version: iceBuilderVersion
    }
}

ext.generatedDir = "$project.buildDir/generated"

def android = false
try {
    compileJava {
        options.debug = debug
    }
} catch(MissingMethodException ex) {
    //
    // For Android builds: thrown if compileJava isn't available.
    //
    android = true
}

def demoJar(name) {
    def taskName = name + "Jar"
    // Create a jar for the client & server which includes everything in the demo.
    def jarTask = tasks.create(name: taskName, type: Jar) {
        version = ""
        baseName = name
        from(sourceSets.main.output) {
            include "**"
        }
    }

    jarTask.manifest {
        attributes("Main-Class": name.capitalize())
        attributes("Class-Path": configurations.runtime.resolve().collect { it.toURI() }.join(' '))
    }

    artifacts {
        archives jarTask
    }
}
ext {
    demoJar = this.&demoJar
}

def demoIceBoxServer() {
    configurations {
        iceboxserver
    }

    dependencies {
        iceboxserver localDependency("ice")
        iceboxserver localDependency("icebox")
        iceboxserver "org.apache.commons:commons-compress:1.14"
    }

    // Create a jar for the client & server which includes everything in the demo.
    def jarTask = tasks.create(name: "IceBoxServerJar", type: Jar) {
        version = ""
        baseName = "iceboxserver"
    }

    jarTask.manifest {
        attributes("Main-Class": "IceBox.Server")
        attributes("Class-Path": configurations.iceboxserver.resolve().collect { it.toURI() }.join(' '))
    }

    artifacts {
        archives jarTask
    }
}
ext {
    demoIceBoxServer = this.&demoIceBoxServer
}


def localDependency(artifactId) {
    return "com.zeroc:${artifactId}:${slice.iceArtifactVersion}"
}
ext {
    localDependency = this.&localDependency
}

if (!android) {
    //
    // Find BerkeleyDB JAR
    //
    if(dbHome) {
        ext.dbJar = file("${dbHome}/db.jar")
    } else {
        def subdirs
        def os = System.properties['os.name']
        if(os.contains("Windows")) {
            subdirs = [ "${slice.iceHome}/lib/",
                        "${slice.iceHome}/cpp/third-party-packages/berkeley.db.java7/build/native/lib"]
        } else {
            subdirs = [
                "/usr/local/opt/ice/libexec/lib/",
                "/usr/local/opt/berkeley-db@5.3/lib/",
                "/usr/local/lib/",
                "/usr/share/java/",
                "/opt/Ice-${project.version}/lib/",
                "/opt/db/lib/",
                "/usr/lib/"]
        }

        ext.dbJar = subdirs.collect({
            file(it).listFiles().findAll({
                it.name in ["db-5.3.28.jar", "db-5.3.21.jar", "db.jar"]
            }).collect()
        }).flatten().find({true})
    }

    if(!ext.dbJar || !ext.dbJar.exists()) {
        throw new GradleException("Unable to find Berkeley DB JAR file, you may have to install it or set dbHome in gradle.properties.");
    }
}
